// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:@localhost:3306/mipa_mart"
}

model Authentications {
  id          String    @id @default(uuid())
  token       String    @db.Text 
}

model Category {
  id          String    @id @db.VarChar(255)
  name        String    @db.VarChar(255)
  description String?   @db.Text
  products    Product[]

  @@map("categories")
}

model Product {
  id          String        @id @db.VarChar(255)
  name        String        @db.VarChar(255)
  description String        @db.Text
  price       Decimal       @db.Decimal(10, 2)
  status      ProductStatus
  images      ProductImages[]
  category    Category?     @relation(fields: [category_id], references: [id])
  category_id String?       @db.VarChar(255)
  seller      Member        @relation(fields: [member_id], references: [id], onDelete: Cascade)
  member_id   String        @db.VarChar(255)

  cartItems CartItem[]

  @@map("products")
}

model Member {
  id           String      @id @db.VarChar(255)
  username     String      @unique @db.VarChar(255)
  email        String      @unique @db.VarChar(255)
  email_verified Boolean   @default(false)
  password     String      @db.VarChar(255)
  name         String      @db.VarChar(255)
  npm          String      @unique @db.VarChar(10)
  major        Major
  ktm_image    String      @db.VarChar(255)
  no_wa        String      @db.VarChar(15)
  address      String      @db.Text
  bio          String?     @db.Text
  verif_status VerifStatus @default(pending)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  Product      Product[]
  paymentMethods      PaymentMethod[]
  deliveryMethods     DeliveryMethod[]
  carts               Cart[]
  orders              Order[]

  @@map("members")
}

model ProductImages {
  id           String      @id @default(uuid())
  product      Product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id   String      @db.VarChar(255)
  url          String      @db.VarChar(255)

  @@map("product_images")
}

model PaymentMethod {
  id          String      @id @db.VarChar(255)
  provider    String      @db.VarChar(255)
  no_account  String      @db.VarChar(255)
  name        String      @db.VarChar(255)
  member      Member      @relation(fields: [member_id], references: [id], onDelete: Cascade)  
  member_id   String      @db.VarChar(255)

  @@map("payment_methods")   
}

model DeliveryMethod {
  id          String      @id @db.VarChar(255)
  method      String      @db.VarChar(255)
  description String?     @db.VarChar(255)
  member      Member      @relation(fields: [member_id], references: [id], onDelete: Cascade)  
  member_id   String      @db.VarChar(255)

  @@map("delivery_methods") 
}

model Customer {
  id           String      @id @db.VarChar(255)
  username     String      @unique @db.VarChar(255)
  email        String      @unique @db.VarChar(255)
  email_verified Boolean   @default(false)
  password     String      @db.VarChar(255)
  name         String      @db.VarChar(255)
  no_wa        String      @db.VarChar(15)
  address      String      @db.Text
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  orders Order[]
  carts  Cart[]

  @@map("customers")
}

model Cart {
  id            String      @id @db.VarChar(255)
  customer_id   String      @db.VarChar(255)
  customer      Customer    @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  member_id     String      @db.VarChar(255)
  member        Member      @relation(fields: [member_id], references: [id])
  total_price   Decimal     @db.Decimal(10, 2)

  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id            String      @id @db.VarChar(255)
  cart_id       String      @db.VarChar(255)
  cart          Cart        @relation(fields: [cart_id], references: [id], onDelete: Cascade)  
  product_id    String      @db.VarChar(255)
  product       Product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  quantity      Int

  @@map("cart_items")
}

model Order {
  id                  String          @id @db.VarChar(255)
  customer_id         String          @db.VarChar(255)
  customer            Customer        @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  member_id           String          @db.VarChar(255)
  member              Member          @relation(fields: [member_id], references: [id], onDelete: Cascade)  
  total_price         Decimal         @db.Decimal(10, 2)
  note                String?         @db.Text
  payment_image       String?         @db.Text
  order_status        OrderStatus     @default(pending)
  payment_status      PaymentStatus   @default(checking)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt

  products OrderProduct[]
  payment_method   OrderPaymentMethod?
  delivery_method  OrderDeliveryMethod?

  @@map("orders")
}

model OrderProduct {
  id            String      @id @default(uuid())
  order_id      String      @db.VarChar(255)
  order         Order       @relation(fields: [order_id], references: [id], onDelete: Cascade)
  name          String      @db.VarChar(255)
  price         Decimal     @db.Decimal(10, 2)
  image         String      @db.VarChar(255)
  quantity      Int

  @@map("order_products")
}

model OrderPaymentMethod {
  id           String  @id @default(uuid())
  order_id     String  @db.VarChar(255) @unique
  order        Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  provider     String  @db.VarChar(255)
  no_account   String  @db.VarChar(255)
  name         String  @db.VarChar(255)

  @@map("order_payment_methods")
}

model OrderDeliveryMethod {
  id           String  @id @default(uuid())
  order_id     String  @db.VarChar(255) @unique
  order        Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  method       String  @db.VarChar(255)
  description  String  @db.VarChar(255)

  @@map("order_delivery_methods")
}

model Admin {
  id           String      @id @db.VarChar(255)
  username     String      @unique @db.VarChar(255)
  password     String      @db.VarChar(255)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt  
}

enum ProductStatus {
  ready
  preorder
  soldout
}

enum Major {
  biologi
  matematika
  fisika
  kimia
  ilmu_komputer
}

enum VerifStatus {
  pending
  approved
  rejected
}

enum OrderStatus {
  pending
  processed
  rejected
  canceled
  completed
}

enum PaymentStatus {
  checking
  paid
  unpaid
}
