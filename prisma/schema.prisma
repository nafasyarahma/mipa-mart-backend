// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:@localhost:3306/mipa_mart"
}

model Category {
  id          String    @id @db.VarChar(255)
  name        String    @db.VarChar(255)
  description String?   @db.Text
  products    Product[]

  @@map("categories")
}

model Product {
  id          String        @id @db.VarChar(255)
  name        String        @db.VarChar(255)
  description String        @db.Text
  price       Decimal       @db.Decimal(10, 2)
  status      ProductStatus
  images      ProductImages[]
  category    Category?     @relation(fields: [category_id], references: [id])
  category_id String?       @db.VarChar(255)
  seller      Member        @relation(fields: [member_id], references: [id], onDelete: Cascade)
  member_id   String        @db.VarChar(255)

  @@map("products")
}

model Member {
  id           String      @id @db.VarChar(255)
  username     String      @unique @db.VarChar(255)
  email        String      @db.VarChar(255)
  password     String      @db.VarChar(255)
  name         String      @db.VarChar(255)
  npm          String      @db.VarChar(10)
  major        Major
  ktm_image    String      @db.VarChar(255)
  no_wa        String      @db.VarChar(15)
  address      String      @db.Text
  bio          String?     @db.Text
  verif_status VerifStatus @default(pending)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  Product      Product[]

  @@map("members")
}

model ProductImages {
  id           String      @id @default(uuid())
  product      Product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id   String      @db.VarChar(255)
  url          String      @db.VarChar(255)

  @@map("product_images")
}

enum ProductStatus {
  ready
  preorder
  soldout
}

enum Major {
  biologi
  matematika
  fisika
  kimia
  ilmu_komputer
}

enum VerifStatus {
  pending
  approved
  rejected
}
